import os
import time

from progress.bar import Bar
import numpy as np

#--------------------------------------------------------------
# Traces are in the for ii_aaaa_bbbb_cccc.npz where:
#      - ii             = index
#      - aaaa_bbbb_cccc = cypher text to key_unwrap
#
# nb_traces  : number for files (one trace per file) to process
# folder_path: source
# start      : first point in the file to read
# nb_points  : number of points to read
# average    : number of files that have the same cyphertext
# skip       : skip traces based on the 'average' value
#--------------------------------------------------------------
def load_npz_traces(nb_traces, folder_path, start, nb_points, average=1, skip=False):
    data_arrays = []
    cyphertexts = []

    # Preallocate space for averaging if needed
    temp_data = None if skip else np.zeros((average, nb_points), dtype=np.float32)

    with Bar('Loading traces', max=nb_traces) as bar:
        trace_count = 0  # Count of processed traces
        batch_idx = 0    # Index within the current averaging batch

        # Filter and sort filenames for consistent processing
        filenames = sorted(f for f in os.listdir(folder_path) if f.endswith(".npz"))

        for filename in filenames:
            if trace_count == nb_traces:
                break

            parts = filename.split('_')
            if len(parts) == 4 and parts[-1].endswith(".npz"):
                # Process cyphertext
                part1 = int(parts[1], 16)
                part1 = (part1 & 0xffffffffffffff00) | ((part1 & 0xff) ^ 0xc)
                part3 = int(parts[3].split('.')[0], 16)
                cypher = part1.to_bytes(8, 'big') + part3.to_bytes(8, 'big')

                # Load trace data
                with np.load(os.path.join(folder_path, filename)) as npz_file:
                    trace_data = npz_file['data'][start:start+nb_points]

                trace_count += 1

                if skip:
                    # Directly append trace without averaging
                    cyphertexts.append(cypher)
                    data_arrays.append(trace_data)
                else:
                    # Add trace to batch for averaging
                    temp_data[batch_idx] = trace_data
                    batch_idx += 1

                    if batch_idx == average:
                        # Append averaged trace
                        cyphertexts.append(cypher)
                        data_arrays.append(np.mean(temp_data[:batch_idx], axis=0))
                        batch_idx = 0

                bar.next()

        bar.finish()

    # Convert to numpy arrays for consistency
    return cyphertexts, np.array(data_arrays[:nb_traces])

def align_trace(reference, trace, start, end):
    subtrace = trace[start:end]
    correlation = np.correlate(subtrace, reference, mode='full')
    shift = np.argmax(correlation) - (len(subtrace) - 1)
    aligned_trace = np.roll(trace, -shift)
    return aligned_trace

def average_trace(traces, start, end):
    sliced_traces = traces[:, start:end]
    return np.mean(sliced_traces, axis=0)

def hw(data):
    HW = [bin(n).count("1") for n in range(0,256)]
    return HW[data]

t_table_decrypt = [
    0x50, 0xa7, 0xf4, 0x51, 0x53, 0x65, 0x41, 0x7e, 0xc3, 0xa4, 0x17, 0x1a, 0x96, 0x5e, 0x27, 0x3a,
    0xcb, 0x6b, 0xab, 0x3b, 0xf1, 0x45, 0x9d, 0x1f, 0xab, 0x58, 0xfa, 0xac, 0x93, 0x03, 0xe3, 0x4b,
    0x55, 0xfa, 0x30, 0x20, 0xf6, 0x6d, 0x76, 0xad, 0x91, 0x76, 0xcc, 0x88, 0x25, 0x4c, 0x02, 0xf5,
    0xfc, 0xd7, 0xe5, 0x4f, 0xd7, 0xcb, 0x2a, 0xc5, 0x80, 0x44, 0x35, 0x26, 0x8f, 0xa3, 0x62, 0xb5,
    0x49, 0x5a, 0xb1, 0xde, 0x67, 0x1b, 0xba, 0x25, 0x98, 0x0e, 0xea, 0x45, 0xe1, 0xc0, 0xfe, 0x5d,
    0x02, 0x75, 0x2f, 0xc3, 0x12, 0xf0, 0x4c, 0x81, 0xa3, 0x97, 0x46, 0x8d, 0xc6, 0xf9, 0xd3, 0x6b,
    0xe7, 0x5f, 0x8f, 0x03, 0x95, 0x9c, 0x92, 0x15, 0xeb, 0x7a, 0x6d, 0xbf, 0xda, 0x59, 0x52, 0x95,
    0x2d, 0x83, 0xbe, 0xd4, 0xd3, 0x21, 0x74, 0x58, 0x29, 0x69, 0xe0, 0x49, 0x44, 0xc8, 0xc9, 0x8e,
    0x6a, 0x89, 0xc2, 0x75, 0x78, 0x79, 0x8e, 0xf4, 0x6b, 0x3e, 0x58, 0x99, 0xdd, 0x71, 0xb9, 0x27,
    0xb6, 0x4f, 0xe1, 0xbe, 0x17, 0xad, 0x88, 0xf0, 0x66, 0xac, 0x20, 0xc9, 0xb4, 0x3a, 0xce, 0x7d,
    0x18, 0x4a, 0xdf, 0x63, 0x82, 0x31, 0x1a, 0xe5, 0x60, 0x33, 0x51, 0x97, 0x45, 0x7f, 0x53, 0x62,
    0xe0, 0x77, 0x64, 0xb1, 0x84, 0xae, 0x6b, 0xbb, 0x1c, 0xa0, 0x81, 0xfe, 0x94, 0x2b, 0x08, 0xf9,
    0x58, 0x68, 0x48, 0x70, 0x19, 0xfd, 0x45, 0x8f, 0x87, 0x6c, 0xde, 0x94, 0xb7, 0xf8, 0x7b, 0x52,
    0x23, 0xd3, 0x73, 0xab, 0xe2, 0x02, 0x4b, 0x72, 0x57, 0x8f, 0x1f, 0xe3, 0x2a, 0xab, 0x55, 0x66,
    0x07, 0x28, 0xeb, 0xb2, 0x03, 0xc2, 0xb5, 0x2f, 0x9a, 0x7b, 0xc5, 0x86, 0xa5, 0x08, 0x37, 0xd3,
    0xf2, 0x87, 0x28, 0x30, 0xb2, 0xa5, 0xbf, 0x23, 0xba, 0x6a, 0x03, 0x02, 0x5c, 0x82, 0x16, 0xed,
    0x2b, 0x1c, 0xcf, 0x8a, 0x92, 0xb4, 0x79, 0xa7, 0xf0, 0xf2, 0x07, 0xf3, 0xa1, 0xe2, 0x69, 0x4e,
    0xcd, 0xf4, 0xda, 0x65, 0xd5, 0xbe, 0x05, 0x06, 0x1f, 0x62, 0x34, 0xd1, 0x8a, 0xfe, 0xa6, 0xc4,
    0x9d, 0x53, 0x2e, 0x34, 0xa0, 0x55, 0xf3, 0xa2, 0x32, 0xe1, 0x8a, 0x05, 0x75, 0xeb, 0xf6, 0xa4,
    0x39, 0xec, 0x83, 0x0b, 0xaa, 0xef, 0x60, 0x40, 0x06, 0x9f, 0x71, 0x5e, 0x51, 0x10, 0x6e, 0xbd,
    0xf9, 0x8a, 0x21, 0x3e, 0x3d, 0x06, 0xdd, 0x96, 0xae, 0x05, 0x3e, 0xdd, 0x46, 0xbd, 0xe6, 0x4d,
    0xb5, 0x8d, 0x54, 0x91, 0x05, 0x5d, 0xc4, 0x71, 0x6f, 0xd4, 0x06, 0x04, 0xff, 0x15, 0x50, 0x60,
    0x24, 0xfb, 0x98, 0x19, 0x97, 0xe9, 0xbd, 0xd6, 0xcc, 0x43, 0x40, 0x89, 0x77, 0x9e, 0xd9, 0x67,
    0xbd, 0x42, 0xe8, 0xb0, 0x88, 0x8b, 0x89, 0x07, 0x38, 0x5b, 0x19, 0xe7, 0xdb, 0xee, 0xc8, 0x79,
    0x47, 0x0a, 0x7c, 0xa1, 0xe9, 0x0f, 0x42, 0x7c, 0xc9, 0x1e, 0x84, 0xf8, 0x00, 0x00, 0x00, 0x00,
    0x83, 0x86, 0x80, 0x09, 0x48, 0xed, 0x2b, 0x32, 0xac, 0x70, 0x11, 0x1e, 0x4e, 0x72, 0x5a, 0x6c,
    0xfb, 0xff, 0x0e, 0xfd, 0x56, 0x38, 0x85, 0x0f, 0x1e, 0xd5, 0xae, 0x3d, 0x27, 0x39, 0x2d, 0x36,
    0x64, 0xd9, 0x0f, 0x0a, 0x21, 0xa6, 0x5c, 0x68, 0xd1, 0x54, 0x5b, 0x9b, 0x3a, 0x2e, 0x36, 0x24,
    0xb1, 0x67, 0x0a, 0x0c, 0x0f, 0xe7, 0x57, 0x93, 0xd2, 0x96, 0xee, 0xb4, 0x9e, 0x91, 0x9b, 0x1b,
    0x4f, 0xc5, 0xc0, 0x80, 0xa2, 0x20, 0xdc, 0x61, 0x69, 0x4b, 0x77, 0x5a, 0x16, 0x1a, 0x12, 0x1c,
    0x0a, 0xba, 0x93, 0xe2, 0xe5, 0x2a, 0xa0, 0xc0, 0x43, 0xe0, 0x22, 0x3c, 0x1d, 0x17, 0x1b, 0x12,
    0x0b, 0x0d, 0x09, 0x0e, 0xad, 0xc7, 0x8b, 0xf2, 0xb9, 0xa8, 0xb6, 0x2d, 0xc8, 0xa9, 0x1e, 0x14,
    0x85, 0x19, 0xf1, 0x57, 0x4c, 0x07, 0x75, 0xaf, 0xbb, 0xdd, 0x99, 0xee, 0xfd, 0x60, 0x7f, 0xa3,
    0x9f, 0x26, 0x01, 0xf7, 0xbc, 0xf5, 0x72, 0x5c, 0xc5, 0x3b, 0x66, 0x44, 0x34, 0x7e, 0xfb, 0x5b,
    0x76, 0x29, 0x43, 0x8b, 0xdc, 0xc6, 0x23, 0xcb, 0x68, 0xfc, 0xed, 0xb6, 0x63, 0xf1, 0xe4, 0xb8,
    0xca, 0xdc, 0x31, 0xd7, 0x10, 0x85, 0x63, 0x42, 0x40, 0x22, 0x97, 0x13, 0x20, 0x11, 0xc6, 0x84,
    0x7d, 0x24, 0x4a, 0x85, 0xf8, 0x3d, 0xbb, 0xd2, 0x11, 0x32, 0xf9, 0xae, 0x6d, 0xa1, 0x29, 0xc7,
    0x4b, 0x2f, 0x9e, 0x1d, 0xf3, 0x30, 0xb2, 0xdc, 0xec, 0x52, 0x86, 0x0d, 0xd0, 0xe3, 0xc1, 0x77,
    0x6c, 0x16, 0xb3, 0x2b, 0x99, 0xb9, 0x70, 0xa9, 0xfa, 0x48, 0x94, 0x11, 0x22, 0x64, 0xe9, 0x47,
    0xc4, 0x8c, 0xfc, 0xa8, 0x1a, 0x3f, 0xf0, 0xa0, 0xd8, 0x2c, 0x7d, 0x56, 0xef, 0x90, 0x33, 0x22,
    0xc7, 0x4e, 0x49, 0x87, 0xc1, 0xd1, 0x38, 0xd9, 0xfe, 0xa2, 0xca, 0x8c, 0x36, 0x0b, 0xd4, 0x98,
    0xcf, 0x81, 0xf5, 0xa6, 0x28, 0xde, 0x7a, 0xa5, 0x26, 0x8e, 0xb7, 0xda, 0xa4, 0xbf, 0xad, 0x3f,
    0xe4, 0x9d, 0x3a, 0x2c, 0x0d, 0x92, 0x78, 0x50, 0x9b, 0xcc, 0x5f, 0x6a, 0x62, 0x46, 0x7e, 0x54,
    0xc2, 0x13, 0x8d, 0xf6, 0xe8, 0xb8, 0xd8, 0x90, 0x5e, 0xf7, 0x39, 0x2e, 0xf5, 0xaf, 0xc3, 0x82,
    0xbe, 0x80, 0x5d, 0x9f, 0x7c, 0x93, 0xd0, 0x69, 0xa9, 0x2d, 0xd5, 0x6f, 0xb3, 0x12, 0x25, 0xcf,
    0x3b, 0x99, 0xac, 0xc8, 0xa7, 0x7d, 0x18, 0x10, 0x6e, 0x63, 0x9c, 0xe8, 0x7b, 0xbb, 0x3b, 0xdb,
    0x09, 0x78, 0x26, 0xcd, 0xf4, 0x18, 0x59, 0x6e, 0x01, 0xb7, 0x9a, 0xec, 0xa8, 0x9a, 0x4f, 0x83,
    0x65, 0x6e, 0x95, 0xe6, 0x7e, 0xe6, 0xff, 0xaa, 0x08, 0xcf, 0xbc, 0x21, 0xe6, 0xe8, 0x15, 0xef,
    0xd9, 0x9b, 0xe7, 0xba, 0xce, 0x36, 0x6f, 0x4a, 0xd4, 0x09, 0x9f, 0xea, 0xd6, 0x7c, 0xb0, 0x29,
    0xaf, 0xb2, 0xa4, 0x31, 0x31, 0x23, 0x3f, 0x2a, 0x30, 0x94, 0xa5, 0xc6, 0xc0, 0x66, 0xa2, 0x35,
    0x37, 0xbc, 0x4e, 0x74, 0xa6, 0xca, 0x82, 0xfc, 0xb0, 0xd0, 0x90, 0xe0, 0x15, 0xd8, 0xa7, 0x33,
    0x4a, 0x98, 0x04, 0xf1, 0xf7, 0xda, 0xec, 0x41, 0x0e, 0x50, 0xcd, 0x7f, 0x2f, 0xf6, 0x91, 0x17,
    0x8d, 0xd6, 0x4d, 0x76, 0x4d, 0xb0, 0xef, 0x43, 0x54, 0x4d, 0xaa, 0xcc, 0xdf, 0x04, 0x96, 0xe4,
    0xe3, 0xb5, 0xd1, 0x9e, 0x1b, 0x88, 0x6a, 0x4c, 0xb8, 0x1f, 0x2c, 0xc1, 0x7f, 0x51, 0x65, 0x46,
    0x04, 0xea, 0x5e, 0x9d, 0x5d, 0x35, 0x8c, 0x01, 0x73, 0x74, 0x87, 0xfa, 0x2e, 0x41, 0x0b, 0xfb,
    0x5a, 0x1d, 0x67, 0xb3, 0x52, 0xd2, 0xdb, 0x92, 0x33, 0x56, 0x10, 0xe9, 0x13, 0x47, 0xd6, 0x6d,
    0x8c, 0x61, 0xd7, 0x9a, 0x7a, 0x0c, 0xa1, 0x37, 0x8e, 0x14, 0xf8, 0x59, 0x89, 0x3c, 0x13, 0xeb,
    0xee, 0x27, 0xa9, 0xce, 0x35, 0xc9, 0x61, 0xb7, 0xed, 0xe5, 0x1c, 0xe1, 0x3c, 0xb1, 0x47, 0x7a,
    0x59, 0xdf, 0xd2, 0x9c, 0x3f, 0x73, 0xf2, 0x55, 0x79, 0xce, 0x14, 0x18, 0xbf, 0x37, 0xc7, 0x73,
    0xea, 0xcd, 0xf7, 0x53, 0x5b, 0xaa, 0xfd, 0x5f, 0x14, 0x6f, 0x3d, 0xdf, 0x86, 0xdb, 0x44, 0x78,
    0x81, 0xf3, 0xaf, 0xca, 0x3e, 0xc4, 0x68, 0xb9, 0x2c, 0x34, 0x24, 0x38, 0x5f, 0x40, 0xa3, 0xc2,
    0x72, 0xc3, 0x1d, 0x16, 0x0c, 0x25, 0xe2, 0xbc, 0x8b, 0x49, 0x3c, 0x28, 0x41, 0x95, 0x0d, 0xff,
    0x71, 0x01, 0xa8, 0x39, 0xde, 0xb3, 0x0c, 0x08, 0x9c, 0xe4, 0xb4, 0xd8, 0x90, 0xc1, 0x56, 0x64,
    0x61, 0x84, 0xcb, 0x7b, 0x70, 0xb6, 0x32, 0xd5, 0x74, 0x5c, 0x6c, 0x48, 0x42, 0x57, 0xb8, 0xd0
]

# Return a precomputed table with the hamming weight of the T-Table output for each possible input values)
def hw_t_table_decrypt():
    return [hw(t_table_decrypt[i*4]) + hw(t_table_decrypt[(i*4)+1]) + hw(t_table_decrypt[(i*4)+2]) + hw(t_table_decrypt[(i*4)+3]) for i in range(256)]

def compute_coeff(key_byte_number, kguess, plaintext, leakage_model, traces):
    num_traces, num_samples = traces.shape

    sumnum = np.zeros(num_samples)
    sumden1 = np.zeros(num_samples)
    sumden2 = np.zeros(num_samples)

    hyp = np.zeros(num_traces)

    for tnum in range(0, num_traces):
        hyp[tnum] = leakage_model(plaintext[tnum][key_byte_number], kguess)

    #Mean of hypothesis
    meanh = np.mean(hyp, dtype=np.float64)

    #Mean of all points in trace
    meant = np.mean(traces, axis=0, dtype=np.float64)

    #For each trace, do the following
    for tnum in range(0, num_traces):
        hdiff = (hyp[tnum] - meanh)
        tdiff = traces[tnum,:] - meant
        sumnum = sumnum + (hdiff*tdiff)
        sumden1 = sumden1 + hdiff*hdiff
        sumden2 = sumden2 + tdiff*tdiff

    correlation_plot = sumnum / np.sqrt(sumden1*sumden2+ 1e-10)
    highest_coeff = max(abs(correlation_plot))

    return correlation_plot, highest_coeff

def compute_coeff_with_convergence(key_byte_number, kguess, plaintext, leakage_model, traces):
    num_traces, num_samples = traces.shape

    cpa_evol = []
    sumnum = np.zeros(num_samples)
    sumden1 = np.zeros(num_samples)
    sumden2 = np.zeros(num_samples)

    hyp = np.zeros(num_traces)

    for tnum in range(10, num_traces):
        hyp[tnum] = leakage_model(plaintext[tnum][key_byte_number], kguess)

        #Mean of hypothesis
        meanh = np.mean(hyp[:tnum + 1], dtype=np.float64)

        #Mean of all points in trace
        meant = np.mean(traces[:tnum + 1], axis=0, dtype=np.float64)

        #For each trace, do the following
        hdiff = (hyp[tnum] - meanh)
        tdiff = traces[tnum,:] - meant
        sumnum = sumnum + (hdiff*tdiff)
        sumden1 = sumden1 + hdiff*hdiff
        sumden2 = sumden2 + tdiff*tdiff

        correlation_plot = sumnum / np.sqrt(sumden1*sumden2+ 1e-10)
        highest_coeff = max(abs(correlation_plot))
        cpa_evol.append(highest_coeff)

    return correlation_plot, highest_coeff, np.array(cpa_evol)